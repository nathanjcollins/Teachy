@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthState
@using System.Security.Claims
@using Teachy.Data.Models
@using Teachy.Services
@using Teachy.Shared.Auth
@inject UserProfileService UserProfileService

<MudThemeProvider />
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.ExtraSmall"
    CloseButton="true"
    DisableBackdropClick="true"
    NoHeader="true"
    Position="DialogPosition.Center"
    CloseOnEscapeKey="true"/>
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Style="@($"color: {_theme.Palette.AppbarText}")">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
        <AccessControl />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Teachy</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
            <CascadingValue Value="@_userId" Name="UserId">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private readonly MudTheme _theme = new();

    private bool _drawerOpen = true;
    private int _userId;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();

        @if (state.User.Identity!.IsAuthenticated)
        {
            var auth0Id = state.User.Claims.Single(x => x.Type == ClaimTypes.NameIdentifier).Value;

		    var userProfile = await UserProfileService.GetByAuth0IdAsync(auth0Id);

		    if (userProfile is null)
		    {
			    userProfile = new UserProfile
				    {
					    FirstName = state.User.Claims.SingleOrDefault(x => x.Type == ClaimTypes.GivenName)?.Value ?? string.Empty,
					    LastName = state.User.Claims.SingleOrDefault(x => x.Type == ClaimTypes.Surname)?.Value ?? string.Empty,
					    Auth0Id = auth0Id
				    };

			    userProfile = await UserProfileService.UpdateAsync(userProfile);
		    }

            _userId = userProfile.Id;
        }

        await base.OnInitializedAsync();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}