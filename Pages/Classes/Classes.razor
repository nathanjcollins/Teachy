@page "/classes"
@using Teachy.Data.Models
@using Teachy.Services
@inject ClassService ClassService

<PageTitle>Classes</PageTitle>
<MudBreadcrumbs Items="_breadcrumbItems"></MudBreadcrumbs>
<MudText Typo="Typo.h3" GutterBottom="true">Classes</MudText>

@if (!_loaded)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudButton Class="mb-2" Href="classes/new" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Create New</MudButton>
    <MudText Inline="true">Or</MudText>
    <MudButton Class="mb-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Secondary">Join existing</MudButton>

    <MudPaper Class="pa-4">
        <MudList Clickable="true">
            @foreach (var c in _classes)
            {
                <MudListItem Href="@($"classes/{c.Id}")">@c.Name <MudText Inline="true" Typo="Typo.caption" style="float: right">Students: @c.ClassMembers.Count</MudText></MudListItem>
            }
        </MudList>
    </MudPaper>
}

@code {
    [CascadingParameter(Name = "UserId")] private int _userId { get; set; }

    private List<Class> _classes = null!;

    private bool _loaded = false;

    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
	{
		new BreadcrumbItem("Classes", href: null, disabled: true)
	};

    protected override async Task OnInitializedAsync()
    {
        _classes = await ClassService.GetClassesByUserIdAsync(_userId);

        await base.OnInitializedAsync();

        _loaded = true;
    }
}